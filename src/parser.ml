type token =
  | CLASS
  | EXTENDS
  | CONSTRUCTOR
  | IMPORT
  | DOT
  | THIS
  | INT
  | FLOAT
  | BOOLEAN
  | CHAR
  | VOID
  | NULL
  | TRUE
  | FALSE
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LBRACKET
  | RBRACKET
  | COMMA
  | AND
  | NOT
  | OR
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | MODULO
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | RETURN
  | IF
  | ELSE
  | FOR
  | WHILE
  | BREAK
  | CONTINUE
  | NEW
  | INT_LITERAL of (int)
  | FLOAT_LITERAL of (float)
  | STRING_LITERAL of (string)
  | ID of (string)
  | CHAR_LITERAL of (char)
  | EOF

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
  open Ast  
# 59 "parser.ml"
let yytransl_const = [|
  257 (* CLASS *);
  258 (* EXTENDS *);
  259 (* CONSTRUCTOR *);
  260 (* IMPORT *);
  261 (* DOT *);
  262 (* THIS *);
  263 (* INT *);
  264 (* FLOAT *);
  265 (* BOOLEAN *);
  266 (* CHAR *);
  267 (* VOID *);
  268 (* NULL *);
  269 (* TRUE *);
  270 (* FALSE *);
  271 (* SEMI *);
  272 (* LPAREN *);
  273 (* RPAREN *);
  274 (* LBRACE *);
  275 (* RBRACE *);
  276 (* LBRACKET *);
  277 (* RBRACKET *);
  278 (* COMMA *);
  279 (* AND *);
  280 (* NOT *);
  281 (* OR *);
  282 (* PLUS *);
  283 (* MINUS *);
  284 (* TIMES *);
  285 (* DIVIDE *);
  286 (* ASSIGN *);
  287 (* MODULO *);
  288 (* EQ *);
  289 (* NEQ *);
  290 (* LT *);
  291 (* LEQ *);
  292 (* GT *);
  293 (* GEQ *);
  294 (* RETURN *);
  295 (* IF *);
  296 (* ELSE *);
  297 (* FOR *);
  298 (* WHILE *);
  299 (* BREAK *);
  300 (* CONTINUE *);
  301 (* NEW *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  302 (* INT_LITERAL *);
  303 (* FLOAT_LITERAL *);
  304 (* STRING_LITERAL *);
  305 (* ID *);
  306 (* CHAR_LITERAL *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\004\000\004\000\005\000\003\000\006\000\
\006\000\007\000\007\000\008\000\008\000\008\000\008\000\010\000\
\009\000\015\000\011\000\012\000\012\000\016\000\016\000\017\000\
\018\000\018\000\019\000\019\000\021\000\021\000\021\000\021\000\
\021\000\022\000\023\000\023\000\024\000\014\000\014\000\025\000\
\025\000\013\000\013\000\026\000\026\000\026\000\026\000\026\000\
\026\000\026\000\026\000\026\000\026\000\026\000\026\000\027\000\
\027\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
\029\000\029\000\028\000\028\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\030\000\030\000\000\000"

let yylen = "\002\000\
\003\000\000\000\001\000\001\000\002\000\005\000\001\000\001\000\
\002\000\005\000\007\000\000\000\002\000\002\000\002\000\007\000\
\003\000\001\000\008\000\000\000\001\000\001\000\003\000\002\000\
\000\000\001\000\001\000\003\000\001\000\001\000\001\000\001\000\
\001\000\002\000\001\000\001\000\004\000\001\000\001\000\000\000\
\003\000\000\000\002\000\002\000\003\000\002\000\003\000\005\000\
\007\000\009\000\005\000\002\000\002\000\003\000\005\000\000\000\
\001\000\001\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\002\000\003\000\
\003\000\003\000\002\000\004\000\005\000\004\000\003\000\003\000\
\002\000\004\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\094\000\000\000\000\000\004\000\000\000\
\000\000\000\000\000\000\008\000\005\000\000\000\000\000\001\000\
\009\000\000\000\000\000\012\000\006\000\000\000\000\000\012\000\
\000\000\000\000\029\000\030\000\032\000\031\000\033\000\010\000\
\013\000\014\000\015\000\000\000\035\000\036\000\000\000\039\000\
\000\000\034\000\000\000\000\000\000\000\040\000\011\000\000\000\
\000\000\000\000\022\000\017\000\000\000\000\000\000\000\024\000\
\000\000\000\000\000\000\042\000\023\000\000\000\041\000\000\000\
\042\000\089\000\091\000\085\000\086\000\000\000\042\000\016\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\083\000\084\000\087\000\000\000\088\000\000\000\000\000\
\043\000\058\000\000\000\000\000\000\000\000\000\000\000\046\000\
\000\000\000\000\000\000\000\000\052\000\053\000\000\000\000\000\
\000\000\000\000\000\000\044\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\019\000\080\000\047\000\045\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\054\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\076\000\000\000\000\000\000\000\000\000\000\000\051\000\
\077\000\000\000\055\000\000\000\000\000\000\000\049\000\000\000\
\000\000\050\000"

let yydgoto = "\002\000\
\004\000\005\000\010\000\006\000\007\000\011\000\012\000\023\000\
\033\000\034\000\035\000\048\000\064\000\087\000\045\000\050\000\
\051\000\135\000\136\000\088\000\037\000\038\000\039\000\040\000\
\054\000\089\000\131\000\090\000\124\000\000\000"

let yysindex = "\007\000\
\007\255\000\000\008\255\000\000\020\255\007\255\000\000\246\254\
\017\255\067\000\020\255\000\000\000\000\053\255\255\254\000\000\
\000\000\056\255\023\255\000\000\000\000\064\255\245\000\000\000\
\035\255\071\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\052\255\000\000\000\000\069\255\000\000\
\055\001\000\000\089\255\077\255\086\255\000\000\000\000\090\255\
\054\255\098\255\000\000\000\000\089\255\100\255\104\255\000\000\
\089\255\115\255\118\255\000\000\000\000\119\255\000\000\067\255\
\000\000\000\000\000\000\000\000\000\000\072\000\000\000\000\000\
\072\000\072\000\056\000\123\255\124\255\130\255\132\255\133\255\
\005\255\000\000\000\000\000\000\134\255\000\000\102\255\207\000\
\000\000\000\000\117\255\240\000\167\255\013\255\114\255\000\000\
\017\001\072\000\072\000\072\000\000\000\000\000\136\255\129\255\
\072\000\004\255\072\000\000\000\072\000\072\000\072\000\072\000\
\072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
\072\000\072\000\072\000\148\255\000\000\000\000\000\000\000\000\
\050\001\135\001\138\255\083\001\072\000\149\255\137\255\135\255\
\135\001\000\000\072\000\166\255\135\001\154\001\154\001\114\255\
\114\255\013\255\013\255\135\001\013\255\172\001\172\001\190\001\
\190\001\190\001\190\001\152\255\011\000\072\000\011\000\165\255\
\152\255\000\000\072\000\116\001\072\000\144\255\172\255\000\000\
\000\000\135\001\000\000\135\001\011\000\072\000\000\000\171\255\
\011\000\000\000"

let yyrindex = "\000\000\
\188\255\000\000\000\000\000\000\000\000\189\255\000\000\000\000\
\000\000\000\000\192\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\146\255\000\000\
\000\000\000\000\176\255\180\255\000\000\000\000\000\000\000\000\
\000\000\181\255\000\000\000\000\176\255\000\000\000\000\000\000\
\000\000\000\000\150\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\108\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\228\001\064\002\000\000\
\000\000\000\000\182\255\000\000\000\000\000\000\000\000\000\000\
\183\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\041\255\000\000\000\000\183\255\000\000\000\000\184\255\
\042\255\000\000\000\000\205\001\198\255\198\000\008\001\087\002\
\110\002\251\001\018\002\040\255\041\002\225\002\239\002\133\002\
\156\002\179\002\202\002\141\000\000\000\182\255\000\000\000\000\
\174\000\000\000\000\000\000\000\000\000\217\255\000\000\000\000\
\000\000\043\255\000\000\199\255\000\000\185\255\000\000\000\000\
\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\000\000\197\000\000\000\193\000\183\000\
\000\000\000\000\000\000\168\000\216\255\235\255\000\000\000\000\
\165\000\099\000\000\000\186\255\000\000\000\000\153\000\000\000\
\000\000\106\255\108\255\000\000\133\000\000\000"

let yytablesize = 1040
let yytable = "\092\000\
\019\000\036\000\094\000\095\000\097\000\025\000\166\000\001\000\
\168\000\167\000\003\000\027\000\028\000\029\000\030\000\031\000\
\020\000\107\000\138\000\036\000\009\000\049\000\175\000\008\000\
\091\000\176\000\178\000\129\000\130\000\132\000\093\000\049\000\
\109\000\139\000\137\000\049\000\140\000\014\000\141\000\142\000\
\143\000\144\000\145\000\146\000\147\000\148\000\149\000\150\000\
\151\000\152\000\153\000\154\000\155\000\103\000\074\000\057\000\
\074\000\057\000\027\000\028\000\074\000\074\000\137\000\027\000\
\028\000\015\000\016\000\025\000\164\000\018\000\021\000\022\000\
\066\000\027\000\028\000\029\000\030\000\031\000\067\000\068\000\
\069\000\024\000\070\000\042\000\071\000\072\000\043\000\130\000\
\046\000\025\000\073\000\052\000\170\000\074\000\172\000\027\000\
\028\000\029\000\030\000\031\000\044\000\053\000\056\000\130\000\
\075\000\076\000\055\000\077\000\078\000\079\000\080\000\081\000\
\082\000\083\000\084\000\085\000\086\000\025\000\107\000\057\000\
\059\000\060\000\066\000\027\000\028\000\029\000\030\000\031\000\
\067\000\068\000\069\000\062\000\070\000\109\000\071\000\125\000\
\065\000\063\000\098\000\099\000\073\000\114\000\115\000\074\000\
\117\000\100\000\101\000\102\000\109\000\105\000\106\000\133\000\
\158\000\162\000\075\000\076\000\163\000\077\000\078\000\079\000\
\080\000\081\000\082\000\083\000\084\000\085\000\086\000\025\000\
\156\000\161\000\107\000\165\000\066\000\027\000\028\000\029\000\
\030\000\031\000\067\000\068\000\069\000\169\000\070\000\173\000\
\071\000\127\000\174\000\177\000\002\000\003\000\073\000\007\000\
\020\000\074\000\038\000\018\000\056\000\021\000\037\000\025\000\
\026\000\056\000\013\000\017\000\075\000\076\000\041\000\077\000\
\078\000\079\000\080\000\081\000\082\000\083\000\084\000\085\000\
\086\000\048\000\081\000\082\000\058\000\061\000\048\000\048\000\
\048\000\048\000\048\000\048\000\048\000\048\000\048\000\160\000\
\048\000\104\000\048\000\048\000\134\000\000\000\000\000\000\000\
\048\000\000\000\000\000\048\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\048\000\048\000\
\000\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\048\000\025\000\000\000\000\000\000\000\000\000\
\066\000\027\000\028\000\029\000\030\000\031\000\067\000\068\000\
\069\000\000\000\070\000\000\000\071\000\000\000\000\000\000\000\
\000\000\000\000\073\000\000\000\000\000\074\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\075\000\076\000\000\000\077\000\078\000\079\000\080\000\081\000\
\082\000\083\000\084\000\085\000\086\000\066\000\000\000\000\000\
\000\000\000\000\000\000\067\000\068\000\069\000\096\000\070\000\
\000\000\000\000\000\000\000\000\000\000\066\000\000\000\073\000\
\000\000\000\000\074\000\067\000\068\000\069\000\000\000\070\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\073\000\
\000\000\000\000\074\000\000\000\081\000\082\000\083\000\084\000\
\085\000\086\000\000\000\000\000\000\000\000\000\000\000\000\000\
\090\000\000\000\000\000\000\000\081\000\082\000\083\000\084\000\
\085\000\086\000\090\000\000\000\090\000\000\000\000\000\090\000\
\090\000\090\000\090\000\000\000\090\000\090\000\090\000\090\000\
\090\000\090\000\090\000\090\000\090\000\090\000\090\000\090\000\
\090\000\079\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\079\000\000\000\079\000\000\000\000\000\
\000\000\079\000\079\000\079\000\000\000\079\000\079\000\079\000\
\079\000\079\000\079\000\079\000\079\000\079\000\079\000\079\000\
\079\000\079\000\078\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\078\000\000\000\078\000\000\000\
\000\000\000\000\078\000\078\000\078\000\000\000\078\000\078\000\
\078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
\078\000\078\000\078\000\107\000\069\000\000\000\069\000\000\000\
\000\000\000\000\069\000\069\000\069\000\108\000\069\000\000\000\
\000\000\000\000\109\000\069\000\000\000\110\000\000\000\111\000\
\112\000\113\000\114\000\115\000\116\000\117\000\118\000\119\000\
\120\000\121\000\122\000\123\000\107\000\025\000\000\000\026\000\
\000\000\000\000\000\000\027\000\028\000\029\000\030\000\031\000\
\126\000\000\000\000\000\109\000\000\000\000\000\110\000\032\000\
\111\000\112\000\113\000\114\000\115\000\116\000\117\000\118\000\
\119\000\120\000\121\000\122\000\123\000\107\000\072\000\000\000\
\072\000\000\000\000\000\000\000\072\000\072\000\072\000\128\000\
\072\000\000\000\000\000\000\000\109\000\072\000\000\000\110\000\
\000\000\111\000\112\000\113\000\114\000\115\000\116\000\117\000\
\118\000\119\000\120\000\121\000\122\000\123\000\107\000\025\000\
\000\000\026\000\000\000\000\000\000\000\027\000\028\000\029\000\
\030\000\031\000\157\000\000\000\000\000\109\000\000\000\000\000\
\110\000\047\000\111\000\112\000\113\000\114\000\115\000\116\000\
\117\000\118\000\119\000\120\000\121\000\122\000\123\000\107\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\159\000\000\000\000\000\109\000\000\000\
\000\000\110\000\000\000\111\000\112\000\113\000\114\000\115\000\
\116\000\117\000\118\000\119\000\120\000\121\000\122\000\123\000\
\107\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\171\000\000\000\000\000\000\000\000\000\109\000\
\000\000\000\000\110\000\107\000\111\000\112\000\113\000\114\000\
\115\000\116\000\117\000\118\000\119\000\120\000\121\000\122\000\
\123\000\000\000\109\000\000\000\000\000\110\000\107\000\111\000\
\112\000\113\000\114\000\115\000\116\000\117\000\118\000\119\000\
\120\000\121\000\122\000\123\000\000\000\109\000\000\000\000\000\
\107\000\000\000\000\000\112\000\113\000\114\000\115\000\000\000\
\117\000\118\000\119\000\120\000\121\000\122\000\123\000\109\000\
\000\000\000\000\107\000\000\000\000\000\112\000\113\000\114\000\
\115\000\000\000\117\000\000\000\000\000\120\000\121\000\122\000\
\123\000\109\000\000\000\000\000\000\000\000\000\000\000\112\000\
\113\000\114\000\115\000\073\000\117\000\073\000\000\000\000\000\
\073\000\073\000\073\000\073\000\000\000\073\000\073\000\073\000\
\073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
\073\000\073\000\071\000\000\000\071\000\000\000\000\000\000\000\
\071\000\071\000\071\000\000\000\071\000\071\000\071\000\071\000\
\071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
\071\000\061\000\000\000\061\000\000\000\000\000\000\000\061\000\
\061\000\061\000\000\000\061\000\061\000\061\000\061\000\061\000\
\061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
\062\000\000\000\062\000\000\000\000\000\000\000\062\000\062\000\
\062\000\000\000\062\000\062\000\062\000\062\000\062\000\062\000\
\062\000\062\000\062\000\062\000\062\000\062\000\062\000\070\000\
\000\000\070\000\000\000\000\000\000\000\070\000\070\000\070\000\
\000\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
\070\000\070\000\070\000\070\000\070\000\070\000\075\000\000\000\
\075\000\000\000\000\000\000\000\075\000\075\000\075\000\000\000\
\075\000\075\000\075\000\000\000\000\000\075\000\000\000\075\000\
\075\000\075\000\075\000\075\000\075\000\059\000\000\000\059\000\
\000\000\000\000\000\000\059\000\059\000\059\000\000\000\059\000\
\059\000\059\000\000\000\000\000\059\000\000\000\059\000\059\000\
\059\000\059\000\059\000\059\000\060\000\000\000\060\000\000\000\
\000\000\000\000\060\000\060\000\060\000\000\000\060\000\060\000\
\060\000\000\000\000\000\060\000\000\000\060\000\060\000\060\000\
\060\000\060\000\060\000\065\000\000\000\065\000\000\000\000\000\
\000\000\065\000\065\000\065\000\000\000\065\000\000\000\000\000\
\000\000\000\000\065\000\000\000\065\000\065\000\065\000\065\000\
\065\000\065\000\066\000\000\000\066\000\000\000\000\000\000\000\
\066\000\066\000\066\000\000\000\066\000\000\000\000\000\000\000\
\000\000\066\000\000\000\066\000\066\000\066\000\066\000\066\000\
\066\000\067\000\000\000\067\000\000\000\000\000\000\000\067\000\
\067\000\067\000\000\000\067\000\000\000\000\000\000\000\000\000\
\067\000\000\000\067\000\067\000\067\000\067\000\067\000\067\000\
\068\000\000\000\068\000\000\000\000\000\000\000\068\000\068\000\
\068\000\000\000\068\000\000\000\000\000\000\000\000\000\068\000\
\000\000\068\000\068\000\068\000\068\000\068\000\068\000\063\000\
\000\000\063\000\000\000\000\000\000\000\063\000\063\000\063\000\
\000\000\063\000\000\000\000\000\000\000\064\000\063\000\064\000\
\063\000\063\000\000\000\064\000\064\000\064\000\000\000\064\000\
\000\000\000\000\000\000\000\000\064\000\000\000\064\000\064\000"

let yycheck = "\070\000\
\002\001\023\000\073\000\074\000\075\000\001\001\157\000\001\000\
\159\000\158\000\004\001\007\001\008\001\009\001\010\001\011\001\
\018\001\005\001\015\001\041\000\001\001\043\000\173\000\016\001\
\065\000\174\000\177\000\098\000\099\000\100\000\071\000\053\000\
\020\001\030\001\105\000\057\000\107\000\048\001\109\000\110\000\
\111\000\112\000\113\000\114\000\115\000\116\000\117\000\118\000\
\119\000\120\000\121\000\122\000\123\000\049\001\015\001\015\001\
\017\001\017\001\017\001\017\001\021\001\022\001\133\000\022\001\
\022\001\049\001\000\000\001\001\139\000\017\001\015\001\049\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\018\001\016\001\049\001\018\001\019\001\016\001\158\000\
\020\001\001\001\024\001\015\001\163\000\027\001\165\000\007\001\
\008\001\009\001\010\001\011\001\049\001\016\001\049\001\174\000\
\038\001\039\001\017\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\001\001\005\001\022\001\
\021\001\018\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\017\001\016\001\020\001\018\001\019\001\
\018\001\020\001\016\001\016\001\024\001\028\001\029\001\027\001\
\031\001\016\001\015\001\015\001\020\001\016\001\049\001\016\001\
\015\001\017\001\038\001\039\001\022\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\001\001\
\021\001\021\001\005\001\020\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\017\001\016\001\040\001\
\018\001\019\001\015\001\017\001\001\001\001\001\024\001\000\000\
\017\001\027\001\049\001\016\001\015\001\017\001\049\001\017\001\
\017\001\017\001\006\000\011\000\038\001\039\001\024\000\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\001\001\021\001\021\001\053\000\057\000\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\133\000\
\016\001\081\000\018\001\019\001\104\000\255\255\255\255\255\255\
\024\001\255\255\255\255\027\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\038\001\039\001\
\255\255\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\001\001\255\255\255\255\255\255\255\255\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\255\255\016\001\255\255\018\001\255\255\255\255\255\255\
\255\255\255\255\024\001\255\255\255\255\027\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\038\001\039\001\255\255\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\006\001\255\255\255\255\
\255\255\255\255\255\255\012\001\013\001\014\001\015\001\016\001\
\255\255\255\255\255\255\255\255\255\255\006\001\255\255\024\001\
\255\255\255\255\027\001\012\001\013\001\014\001\255\255\016\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\024\001\
\255\255\255\255\027\001\255\255\045\001\046\001\047\001\048\001\
\049\001\050\001\255\255\255\255\255\255\255\255\255\255\255\255\
\005\001\255\255\255\255\255\255\045\001\046\001\047\001\048\001\
\049\001\050\001\015\001\255\255\017\001\255\255\255\255\020\001\
\021\001\022\001\023\001\255\255\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\005\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\015\001\255\255\017\001\255\255\255\255\
\255\255\021\001\022\001\023\001\255\255\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\005\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\015\001\255\255\017\001\255\255\
\255\255\255\255\021\001\022\001\023\001\255\255\025\001\026\001\
\027\001\028\001\029\001\030\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\005\001\015\001\255\255\017\001\255\255\
\255\255\255\255\021\001\022\001\023\001\015\001\025\001\255\255\
\255\255\255\255\020\001\030\001\255\255\023\001\255\255\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\005\001\001\001\255\255\003\001\
\255\255\255\255\255\255\007\001\008\001\009\001\010\001\011\001\
\017\001\255\255\255\255\020\001\255\255\255\255\023\001\019\001\
\025\001\026\001\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\005\001\015\001\255\255\
\017\001\255\255\255\255\255\255\021\001\022\001\023\001\015\001\
\025\001\255\255\255\255\255\255\020\001\030\001\255\255\023\001\
\255\255\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\005\001\001\001\
\255\255\003\001\255\255\255\255\255\255\007\001\008\001\009\001\
\010\001\011\001\017\001\255\255\255\255\020\001\255\255\255\255\
\023\001\019\001\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\005\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\017\001\255\255\255\255\020\001\255\255\
\255\255\023\001\255\255\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\005\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\015\001\255\255\255\255\255\255\255\255\020\001\
\255\255\255\255\023\001\005\001\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\255\255\020\001\255\255\255\255\023\001\005\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\255\255\020\001\255\255\255\255\
\005\001\255\255\255\255\026\001\027\001\028\001\029\001\255\255\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\020\001\
\255\255\255\255\005\001\255\255\255\255\026\001\027\001\028\001\
\029\001\255\255\031\001\255\255\255\255\034\001\035\001\036\001\
\037\001\020\001\255\255\255\255\255\255\255\255\255\255\026\001\
\027\001\028\001\029\001\015\001\031\001\017\001\255\255\255\255\
\020\001\021\001\022\001\023\001\255\255\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\015\001\255\255\017\001\255\255\255\255\255\255\
\021\001\022\001\023\001\255\255\025\001\026\001\027\001\028\001\
\029\001\030\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\015\001\255\255\017\001\255\255\255\255\255\255\021\001\
\022\001\023\001\255\255\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\015\001\255\255\017\001\255\255\255\255\255\255\021\001\022\001\
\023\001\255\255\025\001\026\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\015\001\
\255\255\017\001\255\255\255\255\255\255\021\001\022\001\023\001\
\255\255\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\036\001\037\001\015\001\255\255\
\017\001\255\255\255\255\255\255\021\001\022\001\023\001\255\255\
\025\001\026\001\027\001\255\255\255\255\030\001\255\255\032\001\
\033\001\034\001\035\001\036\001\037\001\015\001\255\255\017\001\
\255\255\255\255\255\255\021\001\022\001\023\001\255\255\025\001\
\026\001\027\001\255\255\255\255\030\001\255\255\032\001\033\001\
\034\001\035\001\036\001\037\001\015\001\255\255\017\001\255\255\
\255\255\255\255\021\001\022\001\023\001\255\255\025\001\026\001\
\027\001\255\255\255\255\030\001\255\255\032\001\033\001\034\001\
\035\001\036\001\037\001\015\001\255\255\017\001\255\255\255\255\
\255\255\021\001\022\001\023\001\255\255\025\001\255\255\255\255\
\255\255\255\255\030\001\255\255\032\001\033\001\034\001\035\001\
\036\001\037\001\015\001\255\255\017\001\255\255\255\255\255\255\
\021\001\022\001\023\001\255\255\025\001\255\255\255\255\255\255\
\255\255\030\001\255\255\032\001\033\001\034\001\035\001\036\001\
\037\001\015\001\255\255\017\001\255\255\255\255\255\255\021\001\
\022\001\023\001\255\255\025\001\255\255\255\255\255\255\255\255\
\030\001\255\255\032\001\033\001\034\001\035\001\036\001\037\001\
\015\001\255\255\017\001\255\255\255\255\255\255\021\001\022\001\
\023\001\255\255\025\001\255\255\255\255\255\255\255\255\030\001\
\255\255\032\001\033\001\034\001\035\001\036\001\037\001\015\001\
\255\255\017\001\255\255\255\255\255\255\021\001\022\001\023\001\
\255\255\025\001\255\255\255\255\255\255\015\001\030\001\017\001\
\032\001\033\001\255\255\021\001\022\001\023\001\255\255\025\001\
\255\255\255\255\255\255\255\255\030\001\255\255\032\001\033\001"

let yynames_const = "\
  CLASS\000\
  EXTENDS\000\
  CONSTRUCTOR\000\
  IMPORT\000\
  DOT\000\
  THIS\000\
  INT\000\
  FLOAT\000\
  BOOLEAN\000\
  CHAR\000\
  VOID\000\
  NULL\000\
  TRUE\000\
  FALSE\000\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LBRACKET\000\
  RBRACKET\000\
  COMMA\000\
  AND\000\
  NOT\000\
  OR\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  MODULO\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  BREAK\000\
  CONTINUE\000\
  NEW\000\
  EOF\000\
  "

let yynames_block = "\
  INT_LITERAL\000\
  FLOAT_LITERAL\000\
  STRING_LITERAL\000\
  ID\000\
  CHAR_LITERAL\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'includes) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'cdecls) in
    Obj.repr(
# 35 "parser.mly"
                      ( Program(_1, _2) )
# 562 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 42 "parser.mly"
                ( [] )
# 568 "parser.ml"
               : 'includes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'include_list) in
    Obj.repr(
# 43 "parser.mly"
                    ( List.rev _1 )
# 575 "parser.ml"
               : 'includes))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'include_decl) in
    Obj.repr(
# 46 "parser.mly"
                               ( [_1] )
# 582 "parser.ml"
               : 'include_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'include_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'include_decl) in
    Obj.repr(
# 47 "parser.mly"
                                ( _2::_1 )
# 590 "parser.ml"
               : 'include_list))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : string) in
    Obj.repr(
# 50 "parser.mly"
                                          ( Import(_3) )
# 597 "parser.ml"
               : 'include_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cdecl_list) in
    Obj.repr(
# 57 "parser.mly"
                  ( List.rev _1 )
# 604 "parser.ml"
               : 'cdecls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cdecl) in
    Obj.repr(
# 60 "parser.mly"
                      ( [_1] )
# 611 "parser.ml"
               : 'cdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'cdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cdecl) in
    Obj.repr(
# 61 "parser.mly"
                      ( _2::_1 )
# 619 "parser.ml"
               : 'cdecl_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'cbody) in
    Obj.repr(
# 64 "parser.mly"
                               ( {
			cname = _2;
			extends = NoParent;
			cbody = _4
		} )
# 631 "parser.ml"
               : 'cdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'cbody) in
    Obj.repr(
# 69 "parser.mly"
                                            ( {
			cname = _2;
			extends = Parent(_4);
			cbody = _6
		} )
# 644 "parser.ml"
               : 'cdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 76 "parser.mly"
                ( { 
			fields = [];
			constructors = [];
			methods = [];
		} )
# 654 "parser.ml"
               : 'cbody))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'cbody) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'field) in
    Obj.repr(
# 81 "parser.mly"
                 ( { 
			fields = _2 :: _1.fields;
			constructors = _1.constructors;
			methods = _1.methods;
		} )
# 666 "parser.ml"
               : 'cbody))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'cbody) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'constructor) in
    Obj.repr(
# 86 "parser.mly"
                       ( { 
			fields = _1.fields;
			constructors = _2 :: _1.constructors;
			methods = _1.methods;
		} )
# 678 "parser.ml"
               : 'cbody))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'cbody) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 91 "parser.mly"
                 ( { 
			fields = _1.fields;
			constructors = _1.constructors;
			methods = _2 :: _1.methods;
		} )
# 690 "parser.ml"
               : 'cbody))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'formals_opt) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 103 "parser.mly"
                                                               (
		{
			
			fname = Constructor;
			returnType = Datatype(ConstructorType);
			formals = _3;
			body = List.rev _6;
			
        
		}
	)
# 708 "parser.ml"
               : 'constructor))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'datatype) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 123 "parser.mly"
                   ( Field(_1, _2) )
# 716 "parser.ml"
               : 'field))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 130 "parser.mly"
    ( _1 )
# 723 "parser.ml"
               : 'fname))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'datatype) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'fname) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 134 "parser.mly"
 ( 
		{
			
			fname = FName(_2);
			returnType = _1;
			formals = _4;
			body = List.rev _7;
			
            
		} 
	)
# 743 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 151 "parser.mly"
                ( [] )
# 749 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 152 "parser.mly"
                  ( List.rev _1 )
# 756 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal) in
    Obj.repr(
# 155 "parser.mly"
                           ( [_1] )
# 763 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'formal) in
    Obj.repr(
# 156 "parser.mly"
                             ( _3 :: _1 )
# 771 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'datatype) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 159 "parser.mly"
             ( Formal(_1, _2) )
# 779 "parser.ml"
               : 'formal))
; (fun __caml_parser_env ->
    Obj.repr(
# 162 "parser.mly"
                ( [] )
# 785 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 163 "parser.mly"
                  ( List.rev _1 )
# 792 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 166 "parser.mly"
                          ( [_1] )
# 799 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 167 "parser.mly"
                            ( _3 :: _1 )
# 807 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 174 "parser.mly"
        ( Int_t )
# 813 "parser.ml"
               : 'primitive))
; (fun __caml_parser_env ->
    Obj.repr(
# 175 "parser.mly"
           ( Float_t )
# 819 "parser.ml"
               : 'primitive))
; (fun __caml_parser_env ->
    Obj.repr(
# 176 "parser.mly"
          ( Char_t )
# 825 "parser.ml"
               : 'primitive))
; (fun __caml_parser_env ->
    Obj.repr(
# 177 "parser.mly"
              ( Bool_t )
# 831 "parser.ml"
               : 'primitive))
; (fun __caml_parser_env ->
    Obj.repr(
# 178 "parser.mly"
             ( Void_t )
# 837 "parser.ml"
               : 'primitive))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 181 "parser.mly"
          ( Objecttype(_2) )
# 844 "parser.ml"
               : 'name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'primitive) in
    Obj.repr(
# 184 "parser.mly"
            ( _1 )
# 851 "parser.ml"
               : 'type_tag))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'name) in
    Obj.repr(
# 185 "parser.mly"
          ( _1 )
# 858 "parser.ml"
               : 'type_tag))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'type_tag) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'brackets) in
    Obj.repr(
# 188 "parser.mly"
                                     ( Arraytype(_1, _3) )
# 866 "parser.ml"
               : 'array_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'type_tag) in
    Obj.repr(
# 191 "parser.mly"
             ( Datatype(_1) )
# 873 "parser.ml"
               : 'datatype))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'array_type) in
    Obj.repr(
# 192 "parser.mly"
               ( _1 )
# 880 "parser.ml"
               : 'datatype))
; (fun __caml_parser_env ->
    Obj.repr(
# 195 "parser.mly"
                      ( 1 )
# 886 "parser.ml"
               : 'brackets))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'brackets) in
    Obj.repr(
# 196 "parser.mly"
                               ( _1 + 1 )
# 893 "parser.ml"
               : 'brackets))
; (fun __caml_parser_env ->
    Obj.repr(
# 203 "parser.mly"
                 ( [] )
# 899 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 204 "parser.mly"
                  ( _2 :: _1 )
# 907 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 207 "parser.mly"
            ( Expr(_1) )
# 914 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 208 "parser.mly"
                     ( Return(_2) )
# 921 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 209 "parser.mly"
                 ( Return(Noexpr) )
# 927 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 210 "parser.mly"
                            ( Block(List.rev _2) )
# 934 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 211 "parser.mly"
                                            ( If(_3, _5, Block([Expr(Noexpr)])) )
# 942 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 212 "parser.mly"
                                            ( If(_3, _5, _7) )
# 951 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 214 "parser.mly"
   ( For(_3, _5, _7, _9) )
# 961 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 215 "parser.mly"
                                   ( While(_3, _5) )
# 969 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 216 "parser.mly"
                    ( Break )
# 975 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 217 "parser.mly"
                      ( Continue )
# 981 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'datatype) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 218 "parser.mly"
                           ( Local(_1, _2, Noexpr) )
# 989 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'datatype) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 219 "parser.mly"
                                  ( Local(_1, _2, _4) )
# 998 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 222 "parser.mly"
                ( Noexpr )
# 1004 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 223 "parser.mly"
                  ( _1 )
# 1011 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'literals) in
    Obj.repr(
# 226 "parser.mly"
                  ( _1 )
# 1018 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 227 "parser.mly"
                          ( Binop(_1, Add,   _3) )
# 1026 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 228 "parser.mly"
                          ( Binop(_1, Sub,   _3) )
# 1034 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 229 "parser.mly"
                          ( Binop(_1, Mult,  _3) )
# 1042 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 230 "parser.mly"
                          ( Binop(_1, Div,   _3) )
# 1050 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 231 "parser.mly"
                          ( Binop(_1, Equal, _3) )
# 1058 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 232 "parser.mly"
                          ( Binop(_1, Neq,   _3) )
# 1066 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 233 "parser.mly"
                          ( Binop(_1, Less,  _3) )
# 1074 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 234 "parser.mly"
                          ( Binop(_1, Leq,   _3) )
# 1082 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 235 "parser.mly"
                          ( Binop(_1, Greater,  _3) )
# 1090 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 236 "parser.mly"
                          ( Binop(_1, Geq,   _3) )
# 1098 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 237 "parser.mly"
                          ( Binop(_1, And,   _3) )
# 1106 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 238 "parser.mly"
                          ( Binop(_1, Mod,   _3))
# 1114 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 239 "parser.mly"
                     ( Unop (Not,   _2) )
# 1121 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 240 "parser.mly"
                          ( Binop(_1, Or,    _3) )
# 1129 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 241 "parser.mly"
                          ( ObjAccess(_1, _3) )
# 1137 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 242 "parser.mly"
                          ( Assign(_1, _3) )
# 1145 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 244 "parser.mly"
                       ( Unop (Sub, _2) )
# 1152 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 245 "parser.mly"
                                   ( Call(_1, _3) )
# 1160 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 246 "parser.mly"
                                      ( ObjectCreate(_2, _4) )
# 1168 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'type_tag) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'bracket_args) in
    Obj.repr(
# 247 "parser.mly"
                                       ( ArrayCreate(Datatype(_2), List.rev _3) )
# 1176 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'bracket_args) in
    Obj.repr(
# 248 "parser.mly"
                                  ( ArrayAccess(_1, List.rev _2) )
# 1184 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 249 "parser.mly"
                            ( _2 )
# 1191 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 252 "parser.mly"
                      ( [_2] )
# 1198 "parser.ml"
               : 'bracket_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'bracket_args) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 253 "parser.mly"
                                        ( _4 :: _1 )
# 1206 "parser.ml"
               : 'bracket_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 256 "parser.mly"
                      ( Int_Lit(_1) )
# 1213 "parser.ml"
               : 'literals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 257 "parser.mly"
                      ( Float_Lit(_1) )
# 1220 "parser.ml"
               : 'literals))
; (fun __caml_parser_env ->
    Obj.repr(
# 258 "parser.mly"
               ( Boolean_Lit(true) )
# 1226 "parser.ml"
               : 'literals))
; (fun __caml_parser_env ->
    Obj.repr(
# 259 "parser.mly"
                ( Boolean_Lit(false) )
# 1232 "parser.ml"
               : 'literals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 260 "parser.mly"
                      ( String_Lit(_1) )
# 1239 "parser.ml"
               : 'literals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 261 "parser.mly"
                  ( Char_Lit(_1) )
# 1246 "parser.ml"
               : 'literals))
; (fun __caml_parser_env ->
    Obj.repr(
# 262 "parser.mly"
                ( This )
# 1252 "parser.ml"
               : 'literals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 263 "parser.mly"
              ( Id(_1) )
# 1259 "parser.ml"
               : 'literals))
; (fun __caml_parser_env ->
    Obj.repr(
# 264 "parser.mly"
               ( Null )
# 1265 "parser.ml"
               : 'literals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 270 "parser.mly"
            ( [_1] )
# 1272 "parser.ml"
               : 'array_prim))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'array_prim) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 271 "parser.mly"
                          ( _3 :: _1 )
# 1280 "parser.ml"
               : 'array_prim))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
